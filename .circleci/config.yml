version: 2

jobs:
  envoy:
    docker:
      - image: gcr.io/cloud-builders/bazel:latest
    environment:
      GOOGLE_CLOUD_SDK_VERSION: 214.0.0  # https://cloud.google.com/sdk/docs/release-notes
      GCP_PROJECT: kouzoh-p-zchee
    working_directory: /src
    shell: /bin/bash -eux -o pipefail
    steps:
      - checkout
      - restore_cache:
          keys:
            - gcloud-214.0.0
      - run:
          name: Install google cloud sdk
          command: |
            if [ ! -d '/usr/local/google-cloud-sdk' ]; then
              curl -sSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz | tar -C /usr/local -xz
            fi
      - save_cache:
          key: gcloud-214.0.0
          paths:
            - /usr/local/google-cloud-sdk
      - run:
          name: Setup GCP service account for remotebuildexection
          command: |
            set +x
            echo ${REMOTEBUILDEXECTION_CREDENTIALS_JSON} | base64 --decode | /usr/local/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=-
            echo ${REMOTEBUILDEXECTION_CREDENTIALS_JSON} | base64 --decode > /src/envoy/remotebuildexection.json
            set -x
      - run:
          name: Fetch envoyproxy/envoy
          command: |
            git clone --depth 1 --branch master --single-branch https://github.com/envoyproxy/envoy /src/envoy/envoy
            cat /src/envoy/bazel/bazel_toolchains.bzl >> /src/envoy/envoy/WORKSPACE
            cat /src/envoy/envoy/WORKSPACE
      - run:
          name: Build envoy
          working_directory: /src/envoy/envoy
          command: |
            bazel --bazelrc=/src/envoy/bazel/latest.bazelrc build //source/... --config=remote --auth_credentials /src/envoy/remotebuildexection.json --remote_instance_name=projects/$GCP_PROJECT/instances/default_instance --project_id=$GCP_PROJECT
      - store_artifacts:
          path: /src/envoy/envoy/bazel-bin/source/

  llvm:
    macos:
      xcode: "10.0.0"  # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "1"
    working_directory: ~/src
    shell: /bin/bash -eux -o pipefail
    steps:
      - checkout
      - run:
          name: Show kernel versions
          command: |
            uname -a
            sw_vers
            xcodebuild -version
            system_profiler SPHardwareDataType
      - run:
          name: Install dependency tools from homebrew
          command: |
            brew list
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/binutils.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/ccache.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/cmake.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/doxygen.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/gnu-tar.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/libxml2.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/ninja.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/pkg-config.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/protobuf.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/sphinx-doc.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/swig.rb
            brew install https://github.com/Homebrew/homebrew-core/raw/master/Formula/z3.rb
            brew link --force libffi libxml2 sphinx-doc
            brew uninstall --force --ignore-dependencies python3
            pip2 install -U pip setuptools
      - run:
          name: Generate lldb_codesign to Keychain
          working_directory: ~/src/llvm/scripts
          command: |
            bash codesign.bash lldb_codesign
            rm -f lldb_codesign.*
      - run:
          name: Fetch LLVM resources
          working_directory: ~/src/llvm
          command: |
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/llvm.git llvm
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/compiler-rt.git llvm/projects/compiler-rt
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/libcxx.git llvm/projects/libcxx
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/libunwind.git llvm/projects/libunwind
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/openmp.git llvm/projects/openmp
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/clang.git llvm/tools/clang
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/clang-tools-extra.git llvm/tools/clang/tools/extra
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/lld.git llvm/tools/lld
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/lldb.git llvm/tools/lldb
            git clone --depth 1 --branch master --single-branch https://git.llvm.org/git/polly.git llvm/tools/polly
      - run:
          name: Configure cmake
          working_directory: ~/src/llvm/build
          command: |
            cmake -G Ninja ../llvm \
              \
              -DCMAKE_BUILD_TYPE:STRING='Release' \
              -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE \
              -DCMAKE_INSTALL_PREFIX:PATH='~/src/llvm/dist' \
              -DCMAKE_OSX_ARCHITECTURES:STRING="$(uname -m)" \
              -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING="$(xcrun --sdk macosx --show-sdk-version)" \
              -DCMAKE_OSX_SYSROOT:PATH="$(xcrun --sdk macosx --show-sdk-path)" \
              \
              -DCLANG_DEFAULT_OBJCOPY:STRING="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin/objcopy" \
              -DCMAKE_OBJCOPY:FILEPATH="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin/objcopy" \
              -DCMAKE_OBJDUMP:FILEPATH="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin/objdump" \
              \
              -DBUILD_SHARED_LIBS:BOOL=FALSE \
              -DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER:BOOL=TRUE \
              \
              -DCLANG_ANALYZER_BUILD_Z3:BOOL=FALSE \
              -DCLANG_ENABLE_PROTO_FUZZER:BOOL=TRUE \
              -DCLANG_INCLUDE_DOCS:BOOL=TRUE \
              -DCLANG_INCLUDE_TESTS:BOOL=FALSE \
              -DCLANG_TOOLS_EXTRA_INCLUDE_DOCS:BOOL=TRUE \
              \
              -DCOMPILER_RT_ENABLE_IOS:BOOL=FALSE \
              -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN:BOOL=FALSE \
              -DCOMPILER_RT_EXTERNALIZE_DEBUGINFO:BOOL=TRUE \
              -DCOMPILER_RT_INCLUDE_TESTS:BOOL=FALSE \
              -DCOMPILER_RT_SANITIZERS_TO_BUILD:STRING='all' \
              \
              -DFFI_INCLUDE_DIR:PATH="$(pkg-config libffi --variable=includedir)" \
              -DFFI_LIBRARY_DIR:PATH="$(pkg-config libffi --variable=libdir)" \
              \
              -DLIBXML2_INCLUDE_DIR:PATH="$(pkg-config libxml-2.0 --variable=includedir)/libxml2" \
              -DLIBXML2_LIBRARY:FILEPATH="$(pkg-config libxml-2.0 --variable=libdir)/libxml2.dylib" \
              -DLIBXML2_XMLLINT_EXECUTABLE:FILEPATH="$(pkg-config libxml-2.0 --variable=exec_prefix)/bin/xmllint" \
              \
              -DLIBCLANG_BUILD_STATIC:BOOL=TRUE \
              \
              -DLLDB_BUILD_FRAMEWORK:BOOL=TRUE \
              -DLLDB_EXPORT_ALL_SYMBOLS:BOOL=FALSE \
              -DLLDB_USE_ENTITLEMENTS:BOOL=TRUE \
              -DDEBUGSERVER_PATH:PATH="$(dirname $(xcode-select --print-path))/SharedFrameworks/LLDB.framework/Versions/A/Resources/debugserver" \
              \
              -DLLVM_BUILD_DOCS:BOOL=TRUE \
              -DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=TRUE \
              -DLLVM_BUILD_INSTRUMENTED:STRING=TRUE \
              -DLLVM_BUILD_LLVM_DYLIB=TRUE \
              -DLLVM_BUILD_STATIC:BOOL=FALSE \
              -DLLVM_CCACHE_BUILD:BOOL=TRUE \
              -DLLVM_CCACHE_DIR:PATH='../.ccache' \
              -DLLVM_CCACHE_MAXSIZE:STRING=10G \
              -DLLVM_ENABLE_ASSERTIONS:BOOL=TRUE \
              -DLLVM_ENABLE_CXX1Y:BOOL=TRUE \
              -DLLVM_ENABLE_CXX1Z:BOOL=TRUE \
              -DLLVM_ENABLE_EH:BOOL=TRUE \
              -DLLVM_ENABLE_FFI:BOOL=TRUE \
              -DLLVM_ENABLE_LTO:STRING=FALSE \
              -DLLVM_ENABLE_RTTI:BOOL=TRUE \
              -DLLVM_ENABLE_SPHINX:BOOL=TRUE \
              -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=FALSE \
              -DLLVM_EXTERNALIZE_DEBUGINFO:BOOL=TRUE \
              -DLLVM_INCLUDE_DOCS:BOOL=TRUE \
              -DLLVM_INCLUDE_EXAMPLES:BOOL=FALSE \
              -DLLVM_INCLUDE_TESTS:BOOL=FALSE \
              -DLLVM_INSTALL_UTILS:BOOL=TRUE \
              -DLLVM_LINK_LLVM_DYLIB:BOOL=FALSE \
              -DLLVM_NATIVE_ARCH:STRING=$(uname -m) \
              -DLLVM_OPTIMIZE_SANITIZED_BUILDS:BOOL=TRUE \
              -DLLVM_OPTIMIZED_TABLEGEN:BOOL=TRUE \
              -DLLVM_PARALLEL_COMPILE_JOBS:STRING="$(getconf _NPROCESSORS_ONLN)" \
              -DLLVM_PARALLEL_LINK_JOBS:STRING="$(getconf _NPROCESSORS_ONLN)" \
              -DLLVM_TARGET_ARCH:STRING=x86_64 \
              -DLLVM_TARGETS_TO_BUILD:STRING=X86 \
              -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=TRUE \
              -DLLVM_TOOL_LTO_BUILD:BOOL=FALSE \
              -DLLVM_USE_SPLIT_DWARF:BOOL=TRUE \
              \
              -DLINK_POLLY_INTO_TOOLS:BOOL=TRUE \
              -DPOLLY_BUNDLED_ISL:BOOL=TRUE \
              -DPOLLY_BUNDLED_JSONCPP:BOOL=TRUE \
              -DPOLLY_ENABLE_GPGPU_CODEGEN:BOOL=FALSE \
              -DWITH_POLLY:BOOL=TRUE \
              \
              -DPYTHON_EXECUTABLE:FILEPATH="$(pkg-config python2 --variable=prefix)/bin/python2.7" \
              -DPYTHON_INCLUDE_DIR:PATH="$(pkg-config python2 --variable=includedir)/python2.7" \
              -DPYTHON_LIBRARY:FILEPATH="$(pkg-config python2 --variable=libdir)/libpython2.7.dylib" \
              \
              -DSPHINX_EXECUTABLE:FILETYPE="$(command -v sphinx-build)" \
              -DSPHINX_OUTPUT_HTML:BOOL=FALSE \
              -DSPHINX_OUTPUT_MAN:BOOL=TRUE \
              -DSPHINX_WARNINGS_AS_ERRORS:BOOL=FALSE \
              \
              -Wno-dev
      - run:
          name: Output cmake configure with -LA
          working_directory: ~/src/llvm/build
          command: |
            cmake -LA || true
      - run:
          name: Output cmake configure with -LAH
          working_directory: ~/src/llvm/build
          command: |
            cmake -LAH || true
      - run:
          name: Compress build directory
          working_directory: ~/src/llvm/tarballs
          command: |
            /usr/local/bin/gtar --exclude 'profiles' -czf ~/src/llvm/tarballs/llvm-build-$(echo $CIRCLE_BRANCH | tr '._/' '-' | tr '[:upper:]' '[:lower:]')-$CIRCLE_BUILD_NUM.tar.gz ~/src/llvm/build
      - run:
          name: Build LLVM toolchain
          working_directory: ~/src/llvm/build
          command: |
            export PATH="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin:$PATH"
            ninja -k 1000 || true
      - run:
          name: Install LLVM toolchain
          working_directory: ~/src/llvm/build
          command: |
            export PATH="/usr/local/opt/binutils/x86_64-apple-darwin$(uname -r)/bin:$PATH"
            ninja install -k 1000 || true
      - run:
          name: Compress compiled LLVM toolchain
          working_directory: ~/src/llvm/tarballs
          command: |
            /usr/local/bin/gtar -czf ~/src/llvm/tarballs/llvm-dist-$(echo $CIRCLE_BRANCH | tr '._/' '-' | tr '[:upper:]' '[:lower:]')-$CIRCLE_BUILD_NUM.tar.gz ~/src/llvm/dist
      - store_artifacts:
          path: ~/src/llvm/tarballs

  debug:
    docker:
      - image: alpine:edge
    working_directory: /src
    steps:
      - run:
          name: env
          command: |
            env | sort
      - run:
          name: cat $CIRCLE_INTERNAL_CONFIG
          command: |
            apk --no-cache add \
              ca-certificates \
              jq
            cat $CIRCLE_INTERNAL_CONFIG | jq . | tee /src/circle_internal_config.json
      - store_artifacts:
          path: /src

workflows:
  version: 2

  build-envoy:
    jobs:
      - envoy:
          context: org-global
          filters:
            branches:
              only: master

  build-llvm:
    jobs:
      - llvm:
          context: org-global
          filters:
            branches:
              only: master

  debug-circleci:
    jobs:
      - debug:
          context: org-global
          filters:
            branches:
              only: master
